(define (domain sokoban_sequential)
  (:requirements :typing :action_costs)
  (:types thing location direction - object
          player stone - thing)
  (:predicates (clear ?l - location)
	       (at ?t - thing ?l - location)
	       (at_goal ?s - stone)
	       (is_goal ?l - location)
	       (is_nongoal ?l - location)
               (move_dir ?from ?to - location ?dir - direction))
  (:functions (total_cost) - number)

  (:action move
   :parameters (?p - player ?from ?to - location ?dir - direction)
   :precondition (and (at ?p ?from)
                      (clear ?to)
                      (move_dir ?from ?to ?dir)
                      )
   :effect       (and (not (at ?p ?from))
                      (not (clear ?to))
                      (at ?p ?to)
                      (clear ?from)
                      )
   )

  (:action push_to_nongoal
   :parameters (?p - player ?s - stone
                ?ppos ?from ?to - location
                ?dir - direction)
   :precondition (and (at ?p ?ppos)
                      (at ?s ?from)
                      (clear ?to)
                      (move_dir ?ppos ?from ?dir)
                      (move_dir ?from ?to ?dir)
                      (is_nongoal ?to)
                      )
   :effect       (and (not (at ?p ?ppos))
                      (not (at ?s ?from))
                      (not (clear ?to))
                      (at ?p ?from)
                      (at ?s ?to)
                      (clear ?ppos)
                      (not (at_goal ?s))
                      (increase (total_cost) 1)
                      )
   )

  (:action push_to_goal
   :parameters (?p - player ?s - stone
                ?ppos ?from ?to - location
                ?dir - direction)
   :precondition (and (at ?p ?ppos)
                      (at ?s ?from)
                      (clear ?to)
                      (move_dir ?ppos ?from ?dir)
                      (move_dir ?from ?to ?dir)
                      (is_goal ?to)
                      )
   :effect       (and (not (at ?p ?ppos))
                      (not (at ?s ?from))
                      (not (clear ?to))
                      (at ?p ?from)
                      (at ?s ?to)
                      (clear ?ppos)
                      (at_goal ?s)
                      (increase (total_cost) 1)
                      )
   )
)
