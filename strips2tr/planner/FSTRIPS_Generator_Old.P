:- import length/2,
        append/3 from basics.




:- ['parseProblem.pl'].

generateDomain(FileName) :-
    parseDomain(FileName,domain(Name,_,_,_,ListOfPred,_,_,ListOfActions)),
    outDomainHeader(Name,ListOfPred,ListOfActions),
    outActions(ListOfActions),
    outAchievesAtoms(ListOfPred),
    outAvoidsAtoms(ListOfPred),
    outAchieves(ListOfActions),
    outAvoids(ListOfActions),
    outExecutes(ListOfActions),
    outNaivePlanner.

/******************************Obsolete Problem Generator**********************
generateProblem(FileName) :-
    parseProblem(FileName,problem(Name,DomainName,_,
				  ListOfObjects,
				  InitialState,
				  Goal,_,_,_)),
    outProblemHeader(Name,DomainName),
    writeln('%%%%%%%%%%%%%%%%%%%%%%  Test File  %%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,
    writeln(':- compiler_options([xpp_on]).'),
    writeln('#include "../../tr_operators.P"'),
    write('#include "'),write(DomainName),writeln('.P"'),
    write('#include "'),write(DomainName),writeln('_data.P"'),nl,
    write('tabled_predicate('),write(Name),writeln('_STRIPS,0).'),
    write('tabled_predicate('),write(Name),writeln('_Naive,0).'),
    writeln('%%%%%%%%%%%%%%%%%%%%%%    Goal     %%%%%%%%%%%%%%%%%%%%%%%%%%'),
    outObjects(ListOfObjects),
    outInitialState(InitialState),nl,nl,
    outGoalSTRIPS(Name,Goal),nl,nl,
    outGoalNaive(Name,Goal),nl,nl,
    writeln('test_description(test_elevator_planning_problem).'),
    write('test_query('),write(Name),writeln('_STRIPS).').
******************************************************************************/


generateProblem(FileName,DomainName) :-
    parseProblem(FileName,problem(Name,DomainName,_,
				  ListOfObjects,
				  InitialState,
				  Goal,_,_,_)),
    outProblemHeader(Name,DomainName),
    writeln('%%%%%%%%%%%%%%%%%%%%%%  Test File  %%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,
    writeln(':- compiler_options([xpp_on]).'),
    writeln('#include "../../tr_operators.P"'),
    write('#include "'),write(DomainName),writeln('.P"'),
    write('#include "'),write(DomainName),writeln('_data.P"'),nl,
    write('tabled_predicate('),write(Name),writeln('_STRIPS,0).'),
    write('tabled_predicate('),write(Name),writeln('_Naive,0).'),
    writeln('%%%%%%%%%%%%%%%%%%%%%%    Goal     %%%%%%%%%%%%%%%%%%%%%%%%%%'),
    outObjects(ListOfObjects),
    outInitialState(InitialState),nl,nl,
    outGoalSTRIPS(Name,Goal),nl,nl,
    outGoalNaive(Name,Goal),nl,nl,
    writeln('test_description(test_elevator_planning_problem).'),
    write('test_query('),write(Name),writeln('_STRIPS).').



outPred([]).

outPred([Head | Tail]) :-
    write('dynamic_predicate('),
    functor(Head, Functor, Arity),
    write(Functor),write(','),write(Arity),
    writeln(').'),
    outPred(Tail).

outTabledActions([]).

outTabledActions([action(ActionName,ActionPar,ActionPre,EPos,ENeg,_)| Tail]) :-
    write('tabled_predicate('),
    length(ActionPar,ParCount),
    write(ActionName),write(','),write(ParCount),
    writeln(').'),
    outTabledActions(Tail).



outProblemHeader(N,D) :-
    write('%% Problem Name:'),
    writeln(N),
    write('%% Domain Name:'),
    writeln(D).

outDomainHeader(N,P,A) :-
    writeln('%%%%%%%%%%%%%%%%%%%%% Domain File  %%%%%%%%%%%%%%%%%%%%%%%%%%'),nl,
    write('%%%%%%%%% '),write(N),writeln('%%%%%%%%% '),
    writeln('tabled_predicate(achieve,1). '),
    writeln('tabled_predicate(execute,1). '),
    writeln('tabled_predicate(avoid,1). '),
    writeln('tabled_predicate(solutionPlan,0). '),
    writeln('tabled_predicate(planningAction,0). '),
    outTabledActions(A),
    writeln('%%%%%%%%%%%%%%%%%%%%%List of Predicates%%%%%%%%%%%%%%%%%%%%%%'),
    outPred(P).

constructTypeObject(_,[]).

constructTypeObject(LH,[H | T]) :-
    write(LH),write('('),write(H),writeln(').'),
    constructTypeObject(LH,T).

outObjects([]).

outObjects([H | T]) :- 
    H =.. [LH | LT],
    constructTypeObject(LH,LT),
    outObjects(T).

outInitialState([]).

outInitialState([H | T]) :-
    write('tr_database('),write(H),writeln(').'),
    outInitialState(T).

%outGoal([]).

outGoalSTRIPS(Name,Goals) :-
    length(Goals,GoalLength),
    GoalLength = 1,
    Goals = [ H ],
    writeln('tr_clause('),
    write('\t'),write(Name),writeln('_STRIPS,'),
    write('\t\tseq(achieve('),write(H),write('),'),write(H),write(')).').


outGoalSTRIPS(Name,Goals) :-
    length(Goals,GoalLength),
    GoalLength = 2,
    Goals = [ H | [T]],
    writeln('tr_clause('),
    write('\t'),write(Name),writeln('_STRIPS,'),
    write('\t\tseq(achieve('),write(H),writeln('),'),
    write('\t\tseq(achieve('),write(T),writeln('),'),
    writeln('\t\tseq('),write(H),write(','),write(T),writeln(')))).').


outGoalSTRIPS(Name,Goals) :-
    length(Goals,GoalLength),
    GoalLength > 2,
    writeln('tr_clause('),
    write('\t'),write(Name),writeln('_STRIPS,'),
    writeln('\t\tseq(shuffle('),outAchievePre(Goals),writeln('),'),
    sequenceMaker(Goals),write(')).').


outGoalNaive(Name,Goals) :-
    length(Goals,GoalLength),
    GoalLength = 1,
    Goals = [ H ],
    writeln('tr_clause('),
    write('\t'),write(Name),writeln('_Naive,'),
    write('\t\tseq(solutionPlan,'),write(H),write(')).').

outGoalNaive(Name,Goals) :-
    length(Goals,GoalLength),
    GoalLength >= 2,
    writeln('tr_clause('),
    write('\t'),write(Name),writeln('_Naive,'),
    writeln('\t\tseq(solutionPlan,'),
    sequenceMaker(Goals),write(')).').



writeParUnTyped(Term) :-
    functor(Term,_,1),
    arg(1, Term, X),
    write(X).

writeParUnTyped(Term) :-
    functor(Term,_,2),
    arg(1, Term, X),
    arg(2, Term, Y),
    write(X),write(','),write(Y).

writeParUnTyped(Term) :-
    functor(Term,_,3),
    arg(1, Term, X),
    arg(2, Term, Y),
    arg(3, Term, Z),
    write(X),write(','),write(Y),write(','),write(Z).

writeParUnTyped(Term) :-
    functor(Term,_,4),
    arg(1, Term, W),
    arg(2, Term, X),
    arg(3, Term, Y),
    arg(4, Term, Z),
    write(W),write(','),write(X),write(','),write(Y),write(','),write(Z).

writePredUnTyped(Term) :-
    functor(Term,T,0),
    write(T).

writePredUnTyped(Term) :-
    functor(Term,T,1),
    arg(1, Term, X),
    write(T),write('('),writeParUnTyped(X),write(')').

writePredUnTyped(Term) :-
    functor(Term,T,2),
    arg(1, Term, X),
    arg(2, Term, Y),
    write(T),write('('),writeParUnTyped(X),write(','),
    writeParUnTyped(Y),write(')').

writePredUnTyped(Term) :-
    functor(Term,T,3),
    arg(1, Term, X),
    arg(2, Term, Y),
    arg(3, Term, Z),
    write(T),write('('),writeParUnTyped(X),write(','),
    writeParUnTyped(Y),writeParUnTyped(Z),write(','),write(')').

writePredUnTyped(Term) :-
    functor(Term,T,4),
    arg(1, Term, W),
    arg(2, Term, X),
    arg(3, Term, Y),
    arg(4, Term, Z),
    write(T),write('('),writeParUnTyped(W),write(','),
    writeParUnTyped(X),write(','),
    writeParUnTyped(Y),writeParUnTyped(Z),write(','),write(')').


outActionPar([]).

outPredPar([Head | []]) :-
    writeParTyped(Head).

outPredPar([Head | Tail]) :-
%    write(Head),
    writeParTyped(Head), write(','),
    outActionPar(Tail).





outAchievesAtoms([]).

outAchievesAtoms([H | T]) :-
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\tachieve('), writePredUnTyped(H),writeln('),'),
    write('\t\t'), writePredUnTyped(H),writeln(').'),
    outAchievesAtoms(T).

outAvoidsAtoms([]).

outAvoidsAtoms([H | T]) :-
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\tavoid('), writePredUnTyped(H),writeln('),'),
    write('\t\tnot('), writePredUnTyped(H),writeln(')).'),
    outAvoidsAtoms(T).

outActions([]).

outActions([action(ActionName,ActionPar,ActionPre,EPos,ENeg,_)| Tail]) :-
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\t'), write(ActionName),write('('),outActionPar(ActionPar),
    writeln('),'),
    makePreList(ActionPre,ActionPreList),
    makeUpdateList(EPos,EPosList,ins),
    makeUpdateList(ENeg,ENegList,del),
    append(ActionPreList,EPosList,L1),
    append(L1,ENegList,L2),
    sequenceMaker(L2),
    writeln(').'),nl,
    writeln('tr_clause('),
    writeln('\tplanningAction,'),
    write('\t\t'),write(ActionName),write('('),outActionPar(ActionPar),
    writeln(')).'),
    outActions(Tail).
    
makePreList(ActionPre,ActionPre) :-
    is_list(ActionPre).

makePreList(ActionPre,[ActionPre]) :-
    \+ is_list(ActionPre).

makeUpdateList(E,EList,Update) :-
    is_list(E),
    makeUpdateListInternal(E,EList,Update).

makeUpdateList(E,[Update(E)],Update) :-
    \+ is_list(E).

makeUpdateListInternal([],[],_).

makeUpdateListInternal([ EHead | ETail],[ Update(EHead) | ETailDone],Update ) :-
    makeUpdateListInternal(ETail,ETailDone,Update).

sequenceMaker([]).

sequenceMaker(List) :- 
    length(List,Length),
    Length = 1,
    List = [H],
    write('\t\t'),write(H).

sequenceMaker([H | T]) :- 
    length(T,Length),
    Length = 1,
    T = [TE],
    write('\t\tseq('),write(H),write(','),write(TE),write(')').

sequenceMaker([H | T]) :- 
    length(T,Length),
    Length >= 2,
    write('\t\tseq('),write(H),writeln(','),
    sequenceMaker(T),write(')').

:- import subsumes/2 from subsumes.
    
writeParTyped(Term) :-
    functor(Term,T,1),
    arg(1, Term, X),
    write(T),write('('),write(X),write(')').

writeParTyped(Term) :-
    functor(Term,T,2),
    arg(1, Term, X),
    arg(2, Term, Y),
    write(T),write('('),write(X),write('),'),
    write(T),write('('),write(Y),write(')').

writeParTyped(Term) :-
    functor(Term,T,3),
    arg(1, Term, X),
    arg(2, Term, Y),
    arg(3, Term, Z),
    write(T),write('('),write(X),write('),'),
    write(T),write('('),write(Y),write('),'),
    write(T),write('('),write(Z),write(')').

writeParTyped(Term) :-
    functor(Term,T,4),
    arg(1, Term, W),
    arg(2, Term, X),
    arg(3, Term, Y),
    arg(4, Term, Z),
    write(T),write('('),write(W),write('),'),
    write(T),write('('),write(X),write('),'),
    write(T),write('('),write(Y),write('),'),
    write(T),write('('),write(Z),write(')').

outActionPar([]).

outActionPar([Head | []]) :-
    writeParTyped(Head).

outActionPar([Head | Tail]) :-
    writeParTyped(Head), write(','),
    outActionPar(Tail).

outAchievesInternal([],_,_).

outAchievesInternal([HPred | TPreds] ,AName,APar) :-
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\tachieve('), write(HPred),writeln('),'),
    write('\t\tseq(not('), write(HPred),writeln('),'),
    write('\t\texecute('), write(AName),write('('),outActionPar(APar),
    writeln(')))).'),
    outAchievesInternal(TPreds ,AName,APar).

outAvoidsInternal([],_,_).

outAvoidsInternal([HPred | TPreds] ,AName,APar) :-
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\tavoid('), write(HPred),writeln('),'),
    write('\t\tseq('), write(HPred),writeln(','),
    write('\t\texecute('), write(AName),write('('),outActionPar(APar),
    writeln(')))).'),
    outAvoidsInternal(TPreds ,AName,APar).


outAchieves([]).

outAchieves([action(AName,APar,_,EPos,_,_) | TActions]) :-
    is_list(EPos),
    outAchievesInternal(EPos,AName,APar),
    outAchieves(TActions).
    
outAchieves([action(AName,APar,_,EPos,_,_) | TActions]) :-
    \+ is_list(EPos),
    outAchievesInternal([EPos],AName,APar),
    outAchieves(TActions).

outAvoids([]).

outAvoids([action(AName,APar,_,_,ENeg,_) | TActions]) :-
    is_list(ENeg),
    outAvoidsInternal(ENeg,AName,APar),
    outAvoids(TActions).

outAvoids([action(AName,APar,_,_,ENeg,_) | TActions]) :-
    \+ is_list(ENeg),
    outAvoidsInternal([ENeg],AName,APar),
    outAvoids(TActions).


outExecutes([]).

outExecutes([action(AName,APar,Pre,_,_,_) | TActions]) :-
    \+ is_list(Pre),
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\texecute('), write(AName),write('('),outActionPar(APar),
    writeln(')),'),
    write('\t\tseq('),write('achieve('),write(Pre),writeln('),'),
    write('\t\t'),write(AName),write('('),outActionPar(APar),
    writeln('))).'),
    outExecutes(TActions).


outExecutes([action(AName,APar,Pre,_,_,_) | TActions]) :-
    is_list(Pre),
    length(Pre,Length),
    Length = 1,
    Pre = [PE],
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\texecute('), write(AName),write('('),outActionPar(APar),
    writeln(')),'),
    write('\t\tseq(achieve('),write(PE),writeln('),'),
    write('\t\t'),write(AName),write('('),outActionPar(APar),
    writeln('))).'),
    outExecutes(TActions).

outExecutes([action(AName,APar,Pre,_,_,_) | TActions]) :-
    is_list(Pre),
    length(Pre,Length),
    Length >= 2,
    writeln('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%'),
    writeln('tr_clause('),
    write('\texecute('), write(AName),write('('),outActionPar(APar),
    writeln(')),'),
    writeln('\t\tseq(shuffle('),outAchievePre(Pre),writeln('),'),
    write('\t\t\t'),write(AName),write('('),outActionPar(APar),
    writeln('))).'),
    outExecutes(TActions).

outAchievePre([H | []]) :- 
    write('\t\t\tachieve('),write(H),write(')').

outAchievePre([H | T]) :- 
    write('\t\t\tachieve('),write(H),writeln('),'),
    outAchievePre(T).


outNaivePlanner :-
    nl,
    writeln('%%%%%%%%% This part is reserved for Naive Planning %%%%%%%%%%'),nl,
    writeln('tr_clause('),
    writeln('\tsolutionPlan,'),
    writeln('\t\tseq(chooseAction(planningAction),'),
    writeln('\t\tseq(planningAction,'),
    writeln('\t\tsolutionPlan)).'),nl,
    writeln('tr_clause('),
    writeln('\tsolutionPlan,'),
    writeln('\t\ttrue)).'),nl,
    writeln('tr_clause('),
    writeln('\tchoose(planningAction),'),
    writeln('\t\tseq(heuristic(0),'),
    writeln('\t\tplanningAction)).'),nl,
    writeln('tr_clause('),
    writeln('\tchoose(planningAction),'),
    writeln('\t\tseq(heuristic(0),'),
    writeln('\t\tplanningAction)).').


/*    
%outActionComp(Pre,EP,EN).

outActionComp([],[],[]).

outActionComp([],[],[Last | []]):-
    write('\t\tdel('),write(Last),write(')').

woutActionComp([],[Last | []],[]):-
    write('\t\tins('),write(Last),write(')').

outActionComp([Last | []],[],[]):-
    write(Last).

outActionComp([H | T],EP,EN):-
    write('\t\tseq('),write(H),writeln(','),outActionComp(T,EP,EN),write(')').

outActionComp([],[H | T],EN):-
    write('\t\tseq(ins('),write(H),writeln('),'),outActionComp([],T,EN),write(')').

outActionComp([],[], [H | T]):-
    write('\t\tseq(del('),write(H),writeln('),'),outActionComp([],[],T),write(')').

outActionComp([],[],Last):-
    Last \= [_],
    write('\t\tdel('),write(Last),write(')').

woutActionComp([],Last,EN):-
    Last \= [_],
    write('\t\tseq(ins('),write(Last),writeln('),'),outActionComp([],[],EN),write(')').

outActionComp(Last,EP,EN):-
    Last \= [_],
    write('\t\tseq('),write(Last),writeln(','),outActionComp([],EP,EN),write(')').
*/

%domain([action(grasp,[hand(?h),container(?c)],[ontable(?c),handempty(?h)],[holding(?h,?c)],[ontable(?c),handempty(?h)],[]),action(leave,[hand(?h),container(?c)],holding(?h,?c),[handempty(?h),ontable(?c)],[holding(?h,?c)],[]),action(fill-shot,[shot(?s),ingredient(?i),hand(?h1,?h2),dispenser(?d)],[holding(?h1,?s),handempty(?h2),dispenses(?d,?i),empty(?s),clean(?s)],[contains(?s,?i),used(?s,?i)],[empty(?s),clean(?s)],[]),action(refill-shot,[shot(?s),ingredient(?i),hand(?h1,?h2),dispenser(?d)],[holding(?h1,?s),handempty(?h2),dispenses(?d,?i),empty(?s),used(?s,?i)],[contains(?s,?i)],[empty(?s)],[]),action(empty-shot,[hand(?h),shot(?p),beverage(?b)],[holding(?h,?p),contains(?p,?b)],[empty(?p)],[contains(?p,?b)],[]),action(clean-shot,[shot(?s),beverage(?b),hand(?h1,?h2)],[holding(?h1,?s),handempty(?h2),empty(?s),used(?s,?b)],[clean(?s)],[used(?s,?b)],[]),action(pour-shot-to-clean-shaker,[shot(?s),ingredient(?i),shaker(?d),hand(?h1),level(?l,?l1)],[holding(?h1,?s),contains(?s,?i),empty(?d),clean(?d),shaker-level(?d,?l),next(?l,?l1)],[empty(?s),contains(?d,?i),unshaked(?d),shaker-level(?d,?l1)],[contains(?s,?i),empty(?d),clean(?d),shaker-level(?d,?l)],[]),action(pour-shot-to-used-shaker,[shot(?s),ingredient(?i),shaker(?d),hand(?h1),level(?l,?l1)],[holding(?h1,?s),contains(?s,?i),unshaked(?d),shaker-level(?d,?l),next(?l,?l1)],[contains(?d,?i),empty(?s),shaker-level(?d,?l1)],[contains(?s,?i),shaker-level(?d,?l)],[]),action(empty-shaker,[hand(?h),shaker(?s),cocktail(?b),level(?l,?l1)],[holding(?h,?s),contains(?s,?b),shaked(?s),shaker-level(?s,?l),shaker-empty-level(?s,?l1)],[shaker-level(?s,?l1),empty(?s)],[shaked(?s),shaker-level(?s,?l),contains(?s,?b)],[]),action(clean-shaker,[hand(?h1,?h2),shaker(?s)],[holding(?h1,?s),handempty(?h2),empty(?s)],[clean(?s)],[],[]),action(shake,[cocktail(?b),ingredient(?d1,?d2),shaker(?s),hand(?h1,?h2)],[holding(?h1,?s),handempty(?h2),contains(?s,?d1),contains(?s,?d2),cocktail-part1(?b,?d1),cocktail-part2(?b,?d2),unshaked(?s)],[shaked(?s),contains(?s,?b)],[unshaked(?s),contains(?s,?d1),contains(?s,?d2)],[]),action(pour-shaker-to-shot,[beverage(?b),shot(?d),hand(?h),shaker(?s),level(?l,?l1)],[holding(?h,?s),shaked(?s),empty(?d),clean(?d),contains(?s,?b),shaker-level(?s,?l),next(?l1,?l)],[contains(?d,?b),shaker-level(?s,?l1)],[clean(?d),empty(?d),shaker-level(?s,?l)],[])])

