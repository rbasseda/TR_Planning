dynamic_predicate(memberof,2).
dynamic_predicate(hasActivated,2).
dynamic_predicate(legitRelationship,2).
dynamic_predicate(denied,2).
dynamic_predicate(hasReadEHR,2).
dynamic_predicate(hasConsented,3).
dynamic_predicate(hasRequestedConsent,3).

tabled_predicate(achieveThroughAtom,1).
tabled_predicate(achieveThroughCommand,1).
tabled_predicate(achieveThroughRule,1).
tabled_predicate(achieve,1).
tabled_predicate(achievePre,1).
tabled_predicate(avoidThroughAtom,1).
tabled_predicate(avoidThroughCommand,1).
tabled_predicate(avoidThroughRule,2).
tabled_predicate(avoid,1).
tabled_predicate(activate,2).
tabled_predicate(deactivate,2).
tabled_predicate(register,2).
tabled_predicate(unregister,2).
tabled_predicate(readEHR,2).
tabled_predicate(denyAccess,2).
tabled_predicate(removeDenyAccess,2).
tabled_predicate(giveConsent,3).
tabled_predicate(requestConsent,3).
tabled_predicate(withdrawConsent,3).
tabled_predicate(cancelTreatment,2).
tabled_predicate(legitRelationship,2).
tabled_predicate(permitted,3).
% Actions
% tr_clause(+Head,+Body)

tr_clause(
	activate(X,patient),
		seq(memberof(X,patient),
		ins(hasActivated(X,patient)))).
tr_clause(
	deactivate(X,patient),
		seq(hasActivated(X,patient),
		del(hasActivated(X,patient)))).
tr_clause(
	activate(X,clinician),
		seq(memberof(X,clinician),
		seq(not(hasActivated(X,admin)),
		ins(hasActivated(X,clinician))))).
tr_clause(
	deactivate(X,clinician),
		seq(hasActivated(X,clinician),
		del(hasActivated(X,clinician)))).
tr_clause(
	activate(X,admin),
		seq(memberof(X,admin),
		seq(not(hasActivated(X,clinician)),
		ins(hasActivated(X,admin))))).
tr_clause(
	deactivate(X,admin),
		seq(hasActivated(X,admin),
		del(hasActivated(X,admin)))).
tr_clause(
	register(X,U,R),
		seq(hasActivated(X,admin),
		ins(memberof(U,R)))).
tr_clause(
	unregister(X,U,R),
		seq(hasActivated(X,admin),
		seq(memberof(U,R),
		seq(del(memberof(U,R)),
		del(hasActivated(U,R)))))).
tr_clause(
	permitted(X,read,P),
		seq(hasActivated(X,clinician),
		seq(legitRelationship(X,P),
		not(denied(P,X))))).
tr_clause(
	readEHR(X,P),
		seq(permitted(X,read,P),
		ins(hasReadEHR(X,P)))).
tr_clause(
	denyAccess(P,X),
		seq(hasActivated(P,patient),
		ins(denied(P,X)))).
tr_clause(
	removeDenyAccess(P,X),
		seq(hasActivated(P,patient),
		seq(denied(P,X),
		del(denied(P,X))))).
tr_clause(
	legitRelationship(X,P),
		hasConsented(P,X,treatment)).
tr_clause(
	giveConsent(P,X,treatment),
		seq(hasActivated(P,patient),
		seq(hasRequestedConsent(X,P,treatment),
		ins(hasConsented(P,X,treatment))))).
tr_clause(
	requestConsent(X,P,treatment),
		seq(hasActivated(X,clinician),
		ins(hasRequestedConsent(X,P,treatment)))).
tr_clause(
	withdrawConsent(P,X,treatment),
		seq(hasActivated(P,patient),
		seq(hasConsented(P,X,treatment),
		del(hasConsented(P,X,treatment))))).
tr_clause(
	cancelTreatment(X,P),
		seq(hasActivated(X,clinician),
		seq(del(hasRequestedConsent(X,P,treatment)),
		del(hasConsented(P,X,treatment))))).
	
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% achieve( P_ext ) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% achieveThroguhAtom(P_ext) %%%%%%%%%%%%%%%%%%%%%%%%

tr_clause(
	achieveThroughAtom(memberof(X,R)),
		memberof(X,R)).
tr_clause(
	achieveThroughAtom(hasActivated(X,R)),
		hasActivated(X,R)).
tr_clause(
	achieveThroughAtom(denied(P,X)),
		denied(P,X)).
tr_clause(
	achieveThroughAtom(hasReadEHR(X,P)),
		hasReadEHR(X,P)).
tr_clause(
	achieveThroughAtom(hasConsented(P,X,treatment)),
		hasConsented(P,X,treatment)).
tr_clause(
	achieveThroughAtom(hasRequestedConsent(X,P,treatment)),
		hasRequestedConsent(X,P,treatment)).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%% achieveThroguhCommand(P_ext) %%%%%%%%%%%%%%%%%%%%%%%

tr_clause(
	achieveThroughCommand(memberof(U,R)),
	        seq(not(memberof(U,R)),
		seq(achievePre(register(X,U,R)),
		register(X,U,R)))).
tr_clause(
	achieveThroughCommand(hasActivated(X,R)),
	        seq(not(hasActivated(X,R)),
		seq(achievePre(activate(X,R)),
		activate(X,R)))).
tr_clause(
	achieveThroughCommand(hasReadEHR(X,P)),
                seq(not(hasReadEHR(X,P)),	   
		seq(achievePre(readEHR(X,P)),
		readEHR(X,P)))).
tr_clause(
	achieveThroughCommand(denied(P,X)),
	        seq(not(denied(P,X)),
		seq(achievePre(denyAccess(P,X)),
		denyAccess(P,X)))).
tr_clause(
	achieveThroughCommand(hasConsented(P,X,treatment)),
	        seq(not(hasConsented(P,X,treatment)),
		seq(achievePre(giveConsent(P,X,treatment)),
		giveConsent(P,X,treatment)))).
tr_clause(
	achieveThroughCommand(hasRequestedConsent(X,P,treatment)),
	        seq(not(hasRequestedConsent(X,P,treatment)),
		seq(achievePre(requestConsent(X,P,treatment)),
		requestConsent(X,P,treatment)))).

%%%%%%%%%%%%%%%%%%%%%%% Final conclusion for achieve(P_ext) %%%%%%%%%%%%%%%%%%%%

tr_clause(
	achieve(memberof(X,R)),
		achieveThroughAtom(memberof(X,R))).
tr_clause(
	achieve(memberof(X,R)),
		achieveThroughCommand(memberof(X,R))).
tr_clause(
	achieve(hasActivated(X,R)),
		achieveThroughAtom(hasActivated(X,R))).
tr_clause(
	achieve(hasActivated(X,R)),
		achieveThroughCommand(hasActivated(X,R))).
tr_clause(
	achieve(denied(P,X)),
		achieveThroughAtom(denied(P,X))).
tr_clause(
	achieve(denied(P,X)),
		achieveThroughCommand(denied(P,X))).
tr_clause(
	achieve(hasReadEHR(X,P)),
		achieveThroughAtom(hasReadEHR(X,P))).
tr_clause(
	achieve(hasReadEHR(X,P)),
		achieveThroughCommand(hasReadEHR(X,P))).
tr_clause(
	achieve(hasConsented(P,X,treatment)),
		achieveThroughAtom(hasConsented(P,X,treatment))).
tr_clause(
	achieve(hasConsented(P,X,treatment)),
		achieveThroughCommand(hasConsented(P,X,treatment))).
tr_clause(
	achieve(hasRequestedConsent(X,P,treatment)),
		achieveThroughAtom(hasRequestedConsent(X,P,treatment))).
tr_clause(
	achieve(hasRequestedConsent(X,P,treatment)),
		achieveThroughCommand(hasRequestedConsent(X,P,treatment))).

		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% avoid( P_ext ) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% avoidThroguhAtom(P_ext) %%%%%%%%%%%%%%%%%%%%%%%%%%

tr_clause(
	avoidThroughAtom(memberof(X,R)),
		not(memberof(X,R))).
tr_clause(
	avoidThroughAtom(hasActivated(X,R)),
		not(hasActivated(X,R))).
tr_clause(
	avoidThroughAtom(denied(P,X)),
		not(denied(P,X))).
tr_clause(
	avoidThroughAtom(hasReadEHR(X,P)),
		not(hasReadEHR(X,P))).
tr_clause(
	avoidThroughAtom(hasConsented(P,X,treatment)),
		not(hasConsented(P,X,treatment))).
tr_clause(
	avoidThroughAtom(hasRequestedConsent(X,P,treatment)),
		not(hasRequestedConsent(X,P,treatment))).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%% avoidThroguhCommand(P_ext) %%%%%%%%%%%%%%%%%%%%%%%%%
	
tr_clause(
	avoidThroughCommand(memberof(X,R)),
	        seq(memberof(X,R),
		seq(achievePre(unregister(X,U,R)),
		unregister(X,U,R)))).
tr_clause(
	avoidThroughCommand(hasActivated(X,R)),
	        seq(hasActivated(X,R),
		seq(achievePre(deactivate(X,R)),
		deactivate(X,R)))).	
tr_clause(
	avoidThroughCommand(hasActivated(X,R)),
	        seq(hasActivated(X,R),
		seq(achievePre(unregister(X,U,R)),
		unregister(X,U,R)))).
tr_clause(
	avoidThroughCommand(denied(P,X)),
	        seq(denied(P,X),
		seq(achievePre(removeDenyAccess(P,X)),
		removeDenyAccess(P,X)))).
tr_clause(
	avoidThroughCommand(hasConsented(P,X,treatment)),
	        seq(hasConsented(P,X,treatment),
		seq(achievePre(withdrawConsent(P,X,treatment)),
		withdrawConsent(P,X,treatment)))).
tr_clause(
	avoidThroughCommand(hasConsented(P,X,treatment)),
	        seq(hasConsented(P,X,treatment),
		seq(achievePre(cancelTreatment(X,P)),
		cancelTreatment(X,P)))).
tr_clause(
	avoidThroughCommand(hasConsented(P,X,treatment)),
	        seq(hasConsented(P,X,treatment),
		seq(achievePre(cancelTreatment(X,P)),
		cancelTreatment(X,P)))).
%%%%%%%%%%%%%%%%%%%%%%% Final conclusion for avoid(P_ext) %%%%%%%%%%%%%%%%%%%%

tr_clause(
	avoid(memberof(X,R)),
		avoidThroughAtom(memberof(X,R))).
tr_clause(
	avoid(memberof(X,R)),
		avoidThroughCommand(memberof(X,R))).
tr_clause(
	avoid(hasActivated(X,R)),
		avoidThroughAtom(hasActivated(X,R))).
tr_clause(
	avoid(hasActivated(X,R)),
		avoidThroughCommand(hasActivated(X,R))).
tr_clause(
	avoid(denied(P,X)),
		avoidThroughAtom(denied(P,X))).
tr_clause(
	avoid(denied(P,X)),
		avoidThroughCommand(denied(P,X))).
tr_clause(
	avoid(hasReadEHR(X,P)),
		avoidThroughAtom(hasReadEHR(X,P))).
tr_clause(
	avoid(hasReadEHR(X,P)),
		avoidThroughCommand(hasReadEHR(X,P))).
tr_clause(
	avoid(hasConsented(P,X,treatment)),
		avoidThroughAtom(hasConsented(P,X,treatment))).
tr_clause(
	avoid(hasConsented(P,X,treatment)),
		avoidThroughCommand(hasConsented(P,X,treatment))).
tr_clause(
	avoid(hasRequestedConsent(X,P,treatment)),
		avoidThroughAtom(hasRequestedConsent(X,P,treatment))).
tr_clause(
	avoid(hasRequestedConsent(X,P,treatment)),
		avoidThroughCommand(hasRequestedConsent(X,P,treatment))).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% achieve( P_int ) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% achieveThroguhAtom(P_int) %%%%%%%%%%%%%%%%%%%%%%%%

tr_clause(
	achieveThroughAtom(permitted(X,read,P)),
		permitted(X,read,P)).
tr_clause(
	achieveThroughAtom(legitRelationship(X,P)),
		legitRelationship(X,P)).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%% achieveThroguhRule(P_int) %%%%%%%%%%%%%%%%%%%%%%%

tr_clause(
	achieveThroughRule(permitted(X,read,P)),
                seq(not(permitted(X,read,P)),
		seq(shuffle_n_regress(achieve(hasActivated(X,clinician)),
				      achieve(legitRelationship(X,P)),
				      avoid(denied(P,X)),true),
		permitted(X,read,P)))).

tr_clause(
	achieveThroughRule(legitRelationship(X,P)),
	        seq(not(legitRelationship(X,P)),
		seq(achieve(hasConsented(P,X,treatment)),
		legitRelationship(X,P)))).

%%%%%%%%%%%%%%%%%%%%%%% Final conclusion for achieve(P_int) %%%%%%%%%%%%%%%%%%%%

tr_clause(
	achieve(permitted(X,read,P)),
		achieveThroughAtom(permitted(X,read,P))).
tr_clause(
	achieve(permitted(X,read,P)),
		achieveThroughRule(permitted(X,read,P))).
tr_clause(
	achieve(legitRelationship(X,P)),
		achieveThroughAtom(legitRelationship(X,P))).
tr_clause(
	achieve(legitRelationship(X,P)),
		achieveThroughRule(legitRelationship(X,P))).

		
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% avoid( P_int ) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%%%%%%%%%%%%%%%%%%%%%%%%%%%%% avoidThroguhAtom(P_int) %%%%%%%%%%%%%%%%%%%%%%%%%%

tr_clause(
	avoidThroughAtom(permitted(X,read,P)),
		not(permitted(X,read,P))).
tr_clause(
	avoidThroughAtom(legitRelationship(X,P)),
		not(legitRelationship(X,P))).
		
%%%%%%%%%%%%%%%%%%%%%%%%%%% avoidThroughRule(P_int) %%%%%%%%%%%%%%%%%%%%%%%%%
	
tr_clause(
	avoidThroughRule(permitted(X,read,P),r1),
		avoid(hasActivated(X,clinician))).
tr_clause(
	avoidThroughRule(permitted(X,read,P),r1),
		avoid(legitRelationship(X,P))).
tr_clause(
	avoidThroughRule(permitted(X,read,P),r1),
		achieve(denied(P,X))).
tr_clause(
	avoidThroughRule(legitRelationship(X,P),r2),
		avoid(hasConsented(P,X,treatment))).
		
%%%%%%%%%%%%%%%%%%%%% Conclusion avoidThroughRule(P_int) %%%%%%%%%%%%%%%%%%%%
	
tr_clause(
	avoidThroughRule(permitted(X,read,P)),
	        seq(permitted(X,read,P),
		avoidThroughRule(permitted(X,read,P),r1))).
tr_clause(
	avoidThroughRule(legitRelationship(X,P)),
	        seq(legitRelationship(X,P),
		avoidThroughRule(legitRelationship(X,P),r2))).
		
		
%%%%%%%%%%%%%%%%%%%%%%% Final conclusion for avoid(P_int) %%%%%%%%%%%%%%%%%%%%

tr_clause(
	avoid(permitted(X,read,P)),
		avoidThroughAtom(permitted(X,read,P))).
tr_clause(
	avoid(permitted(X,read,P)),
		avoidThroughRule(permitted(X,read,P))).
tr_clause(
	avoid(legitRelationship(X,P)),
		avoidThroughAtom(legitRelationship(X,P))).
tr_clause(
	avoid(legitRelationship(X,P)),
		avoidThroughRule(legitRelationship(X,P))).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% achievePre(Q) %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%


tr_clause(
	achievePre(activate(X,patient)),
		achieve(memberof(X,patient))).
tr_clause(
	achievePre(deactivate(X,patient)),
		achieve(hasActivated(X,patient))).
tr_clause(
	achievePre(activate(X,clinician)),
		shuffle_n_regress(achieve(memberof(X,clinician)),
		avoid(hasActivated(X,admin)),true)).
tr_clause(
	achievePre(deactivate(X,clinician)),
		achieve(hasActivated(X,clinician))).
tr_clause(
	achievePre(activate(X,admin)),
	        shuffle_n_regress(achieve(memberof(X,admin)),
		avoid(hasActivated(X,clinician)),true)).
tr_clause(
	achievePre(deactivate(X,clinician)),
		achieve(hasActivated(X,clinician))).
tr_clause(
	achievePre(register(X,U,R)),
		achieve(hasActivated(X,admin))).
tr_clause(
	achievePre(unregister(X,U,R)),
		shuffle_n_regress(achieve(hasActivated(X,admin)),
		achieve(memberof(U,R)),true)).
tr_clause(
	achievePre(readEHR(X,P)),
		achieve(permitted(X,read,P))).
tr_clause(
	achievePre(denyAccess(P,X)),
		achieve(hasActivated(P,patient))).
tr_clause(
	achievePre(removeDenyAccess(P,X)),
		shuffle_n_regress(achieve(hasActivated(P,patient)),
		achieve(denied(P,X)),true)).
tr_clause(
	achievePre(giveConsent(P,X,treatment)),
		shuffle_n_regress(achieve(hasActivated(P,patient)),
		achieve(hasRequestedConsent(X,P,treatment)),true)).
tr_clause(
	achievePre(requestConsent(X,P,treatment)),
		achieve(hasActivated(X,clinician))).
tr_clause(
	achievePre(withdrawConsent(P,X,treatment)),
		shuffle_n_regress(achieve(hasActivated(P,patient)),
		achieve(hasConsented(P,X,treatment)),true)).
tr_clause(
	achievePre(cancelTreatment(X,P)),
		achieve(hasActivated(X,clinician))).
